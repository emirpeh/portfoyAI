generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  name      String
  email     String    @unique
  role      String    @default("USER")
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customer  Customer? @relation("UserToCustomer")
}

model Customer {
  id                  String              @id @default(uuid())
  name                String
  email               String                @unique
  phone               String?
  company             String?
  customerType        String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  userId              String?               @unique
  user                User?                 @relation("UserToCustomer", fields: [userId], references: [id])
  searchRequests      PropertySearchRequest[]
  listings            RealEstateListing[]   @relation("SellerListings")
  realEstateInterests RealEstateInterest[]  @relation("BuyerInterests")
}

model RealEstateListing {
  id            String               @id @default(uuid())
  title         String?
  listingNo     String               @unique
  status        ListingStatus        @default(ACTIVE)
  transactionType TransactionType    @default(SALE)
  sellerId      String
  propertyType  String
  location      String
  city          String?
  district      String?
  neighborhood  String?
  price         Float
  currency      String
  size          Float?
  roomCount     Int?
  bathroomCount Int?
  floor         Int?
  totalFloors   Int?
  hasGarage     Boolean              @default(false)
  hasGarden     Boolean              @default(false)
  hasPool       Boolean              @default(false)
  isFurnished   Boolean              @default(false)
  yearBuilt     Int?
  description   String?
  features      Json?
  images        Json?
  videos        Json?
  virtualTour   String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
  interests     RealEstateInterest[]
  seller        Customer             @relation("SellerListings", fields: [sellerId], references: [id])
  matchedProperties MatchedProperty[]
  files         RealEstateFile[]
  offers        Offer[]
}

model RealEstateInterest {
  id            String               @id @default(uuid())
  status        String
  buyerId       String
  listingId     String
  notes         String?
  viewingDate   DateTime?
  offerAmount   Float?
  offerCurrency String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  listing       RealEstateListing @relation(fields: [listingId], references: [id])
  buyer         Customer          @relation("BuyerInterests", fields: [buyerId], references: [id])
}

model PropertySearchRequest {
  id               String               @id @default(uuid())
  requestNo        String               @unique
  status           String               @default("ACTIVE")
  transactionType  TransactionType      @default(SALE)
  customerId       String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  propertyTypes    Json?
  locations        Json?
  minPrice         Float?
  maxPrice         Float?
  currency         String?              @default("TRY")
  minSize          Float?
  maxSize          Float?
  minRooms         Int?
  maxRooms         Int?
  requiredFeatures Json?
  notes            String?
  customer         Customer?            @relation(fields: [customerId], references: [id])
  mailLogs         MailLogs[]
  matchedProperties MatchedProperty[]
  offers           Offer[]
}

model MatchedProperty {
  id                String               @id @default(uuid())
  searchRequestId   String
  listingId         String
  status            String               @default("SUGGESTED")
  matchScore        Float?
  suggestionReason  String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  searchRequest     PropertySearchRequest @relation(fields: [searchRequestId], references: [id])
  listing           RealEstateListing     @relation(fields: [listingId], references: [id])

  @@unique([searchRequestId, listingId])
}

model MailLogs {
  id                      String   @id @default(uuid())
  type                    String
  externalId              String?  @unique
  from                    String
  to                      String
  cc                      String?
  contentTitle            String?
  contentBody             String?
  isSend                  Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  language                String?
  status                  String?
  parsedData              Json?
  offerId                 String?
  propertySearchRequest   PropertySearchRequest? @relation(fields: [propertySearchRequestId], references: [id])
  propertySearchRequestId String?
  listingId               String?
}

model RealEstateFile {
  id                String               @id @default(uuid())
  fileName          String
  path              String
  mimetype          String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  listing           RealEstateListing     @relation(fields: [listingId], references: [id])
  listingId         String
  realEstateListingId String
}

model Offer {
  id                      String      @id @default(uuid())
  propertySearchRequestId String
  propertySearchRequest   PropertySearchRequest @relation(fields: [propertySearchRequestId], references: [id])
  realEstateListingId     String
  realEstateListing       RealEstateListing @relation(fields: [realEstateListingId], references: [id])
  status                  OfferStatus @default(PENDING)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  @@unique([propertySearchRequestId, realEstateListingId])
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TransactionType {
  SALE
  RENT
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  PROCESSING
  SOLD
  RENTED
}