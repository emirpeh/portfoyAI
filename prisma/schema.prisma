generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  role      String    @default("USER")
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customer  Customer? @relation("UserToCustomer")
}

model Customer {
  id                  Int                   @id @default(autoincrement())
  name                String
  email               String                @unique
  phone               String?
  company             String?
  customerType        String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  userId              Int?                  @unique
  user                User?                 @relation("UserToCustomer", fields: [userId], references: [id])
  searchRequests      PropertySearchRequest[]
  listings            RealEstateListing[]   @relation("SellerListings")
  realEstateInterests RealEstateInterest[]  @relation("BuyerInterests")
  buyerPreference     BuyerPreference?      @relation("CustomerToBuyerPreference")
}

model RealEstateListing {
  id            Int                  @id @default(autoincrement())
  listingNo     String               @unique
  status        String
  sellerId      Int
  propertyType  String
  location      String
  city          String
  district      String?
  neighborhood  String?
  price         Float
  currency      String
  size          Float?
  roomCount     Int?
  bathroomCount Int?
  floor         Int?
  totalFloors   Int?
  hasGarage     Boolean              @default(false)
  hasGarden     Boolean              @default(false)
  hasPool       Boolean              @default(false)
  isFurnished   Boolean              @default(false)
  yearBuilt     Int?
  description   String
  features      Json?
  images        Json?
  videos        Json?
  virtualTour   String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
  interests     RealEstateInterest[]
  seller        Customer             @relation("SellerListings", fields: [sellerId], references: [id])
  matchedProperties MatchedProperty[]
}

model RealEstateInterest {
  id            Int               @id @default(autoincrement())
  status        String
  buyerId       Int
  listingId     Int
  notes         String?
  viewingDate   DateTime?
  offerAmount   Float?
  offerCurrency String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  listing       RealEstateListing @relation(fields: [listingId], references: [id])
  buyer         Customer          @relation("BuyerInterests", fields: [buyerId], references: [id])
}

model BuyerPreference {
  id                 Int       @id @default(autoincrement())
  customerId         Int       @unique
  customer           Customer  @relation("CustomerToBuyerPreference", fields: [customerId], references: [id])
  preferredLocations Json?
  minPrice           Float?
  maxPrice           Float?
  currency           String?   @default("TRY")
  minSize            Float?
  maxSize            Float?
  propertyTypes      Json?
  roomCountMin       Int?
  roomCountMax       Int?
  requiredFeatures   Json?
  hasGarage          Boolean?
  hasGarden          Boolean?
  hasPool            Boolean?
  isFurnished        Boolean?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model PropertySearchRequest {
  id               Int               @id @default(autoincrement())
  requestNo        String            @unique
  status           String            @default("ACTIVE")
  customerId       Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  propertyTypes    Json?
  locations        Json?
  minPrice         Float?
  maxPrice         Float?
  currency         String?           @default("TRY")
  minSize          Float?
  maxSize          Float?
  minRooms         Int?
  maxRooms         Int?
  requiredFeatures Json?
  notes            String?
  customer         Customer          @relation(fields: [customerId], references: [id])
  mailLogs         MailLogs[]
  matchedProperties MatchedProperty[]
}

model MatchedProperty {
  id                Int                   @id @default(autoincrement())
  searchRequestId   Int
  listingId         Int
  status            String                @default("SUGGESTED")
  matchScore        Float?
  suggestionReason  String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  searchRequest     PropertySearchRequest @relation(fields: [searchRequestId], references: [id])
  listing           RealEstateListing     @relation(fields: [listingId], references: [id])

  @@unique([searchRequestId, listingId])
}

model MailLogs {
  id                  Int                    @id @default(autoincrement())
  type                String
  externalId          String?
  from                String
  to                  String
  cc                  String?
  contentTitle        String?
  contentBody         String?
  parsedData          Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  deletedAt           DateTime?
  language            String?
  searchRequestId     Int?
  propertySearchRequest PropertySearchRequest? @relation(fields: [searchRequestId], references: [id])
}

model CustomerMailList {
  id         Int       @id @default(autoincrement())
  customerId Int
  mail       String
  isSend     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@unique([customerId, mail])
}
