generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String
  password  String
  isDefault Boolean   @default(false)
  role      Role      @default(CUSTOMER)
  customer  Customer?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([email, deletedAt])
  @@map("users")
}

model Customer {
  id         Int       @id @default(autoincrement())
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?   @unique
  externalId String?
  customerMailList CustomerMailList[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("customers")
}


model CustomerMailList {
  id        Int       @id @default(autoincrement())
  mail      String
  isSend    Boolean   @default(true)
  customerId Int
  customer  Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  mailLogs  MailLogs[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("customer_mail_list")
}

model MailLogs {
  id          String   @id @default(uuid())
  externalId  String?
  from        String   @default("")
  to          String   @default("")
  cc          String   @default("")
  contentTitle String  @default("")
  contentBody String   @default("")
  modelResponseMail String?
  language String?
  type        String
  offer       Offer?   @relation(fields: [offerId], references: [id])
  offerId     Int?
  customerMailListId Int?
  customerMailList    CustomerMailList?   @relation(fields: [customerMailListId], references: [id], onDelete: Cascade)
  supplierOfferId Int?
  supplierOffer SupplierOffer?   @relation(fields: [supplierOfferId], references: [id], onDelete: Cascade)
  supplierContactId Int?
  supplierContact SupplierContactList?   @relation(fields: [supplierContactId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  @@map("mail_logs")
}


model Offer {
  id        Int       @id @default(autoincrement())
  offerNo   String    @unique
  status    String 
  loadDate  DateTime? @default(dbgenerated("NULL"))
  loadCountry String?
  loadCity String?
  packagingType String?
  numOfContainers Int?
  containerType String?
  containerDimensions String?
  goodsType String?
  isStackable String?
  customs String?
  deliveryCountry String?
  deliveryCity String?
  deliveryDate DateTime? @default(dbgenerated("NULL"))
  foreignTrade String?
  deliveryPostalCode String?
  calculatedVolume Int?
  calculatedLdm Int?
  mailLogs  MailLogs[]
  SupplierOffer SupplierOffer[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  @@map("offers")
  OfferResult OfferResult[]
}

model OfferResult {
  id        Int       @id @default(autoincrement())
  offerId   Int
  offer     Offer   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  supplierContactId Int?
  supplierContact SupplierContactList?   @relation(fields: [supplierContactId], references: [id])
  price     String?
  note      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model OfferConfiguration {
  id        Int       @id @default(autoincrement())
  isEnabled Boolean   @default(true)
  rate      String
  profitMargin      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SupplierOffer {
  id        Int       @id @default(autoincrement())
  offerId   Int
  offer     Offer   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  supplierContactId Int?
  supplierContact SupplierContactList?   @relation(fields: [supplierContactId], references: [id])
  mailLogs  MailLogs[]
  price     String?
  note      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}


model SupplierContactList {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  gender    String
  companyName String
  countries String
  customs String?
  foreignTrades String
  mailLogs  MailLogs[]
  supplierOffers SupplierOffer[]
  language String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  @@map("supplier_contacts")
  OfferResult OfferResult[]
}

enum Role {
  CUSTOMER
  ADMIN
} 